<?php

/**
 * @file
 * Hook implementations and callbacks for campaignion_logcrm module.
 */

use Drupal\campaignion\ContactTypeManager;
use Drupal\campaignion\NoEmailException;
use Drupal\campaignion\CRM\Import\Source\ArraySource;
use Drupal\little_helpers\Services\Container;
use Drupal\little_helpers\Webform\Submission;
use Drupal\webform_paymethod_select\WebformPaymentContext;

use Drupal\campaignion_logcrm\Client;
use Drupal\campaignion_logcrm\Event;
use Drupal\campaignion_logcrm\NewsletterProvider;
use Drupal\campaignion_logcrm\OptInExporter;
use Drupal\campaignion_logcrm\PaymentExporter;
use Drupal\campaignion_logcrm\QueueItem;
use Drupal\campaignion_logcrm\SubmissionExporter;

if (module_exists('manual_direct_debit_uk')) {
  require_once 'integrations/manual_direct_debit_uk.inc';
}
if (module_exists('paypal_payment')) {
  require_once 'integrations/paypal_payment.inc';
}
if (module_exists('webform_paymethod_select')) {
  require_once 'integrations/webform_paymethod_select.inc';
}
if (module_exists('campaignion_supporter_tags')) {
  require_once 'integrations/campaignion_supporter_tags.inc';
}
if (module_exists('campaignion_source_tags')) {
  require_once 'integrations/campaignion_source_tags.inc';
}

/**
 * Implements hook_module_implements_alter().
 */
function campaignion_logcrm_module_implements_alter(array &$impl, $hook) {
  if ($hook == 'webform_submission_insert' || $hook == 'webform_submission_update') {
    $group = $impl['campaignion_logcrm'];
    unset($impl['campaignion_logcrm']);
    $impl['campaignion_logcrm'] = $group;
  }
}

/**
 * Implements hook_cronapi().
 */
function campaignion_logcrm_cronapi($op, $job = NULL) {
  $items['campaignion_logcrm_send_queue'] = array(
    'description' => 'Send queue data to logcrm',
    'rule' => '*/2 * * * *',
    'weight' => 100,
    'file' => 'cron.php',
    'callback' => '\\Drupal\\campaignion_logcrm\\send_queue',
  );
  return $items;
}

/**
 * Implements hook_little_helpers_serices().
 */
function campaignion_logcrm_little_helpers_services() {
  $info['campaignion_logcrm.client'] = [
    'class' => Client::class,
    'arguments' => [
      '!campaignion_logcrm_api_url',
      '@campaignion_auth.AuthAppClient',
      '!campaignion_organization',
    ],
  ];
  $info['campaignion_logcrm.component_plugins'] = [
    'class' => Container::class,
    'arguments' => ['campaignion_logcrm.component_plugins'],
    'calls' => [
      ['loadSpecsFromHook', [
        'campaignion_logcrm_webform_component_exporter_info',
      ]],
    ],
  ];
  $info['campaignion_logcrm.opt_in_exporter'] = [
    'class' => OptInExporter::class,
    'constructor' => 'fromConfig',
  ];
  $info['campaignion_logcrm.payment_exporter']['class'] = PaymentExporter::class;
  $info['campaignion_logcrm.submission_exporter'] = [
    'class' => SubmissionExporter::class,
    'arguments' => [
      '@campaignion_logcrm.component_plugins',
      '@campaignion_logcrm.opt_in_exporter',
    ],
  ];
  return $info;
}

/**
 * Implements hook_campaignion_newsletters_provider_info().
 */
function campaignion_logcrm_campaignion_newsletters_provider_info() {
  $providers['logcrm'] = [
    'class' => NewsletterProvider::class,
    'params' => [],
  ];
  return $providers;
}

/**
 * Implements hook_webform_submission_insert().
 */
function campaignion_logcrm_webform_submission_insert($node, $submission) {
  // Send submission event.
  $e = Event::fromSubmission(new Submission($node, $submission));
  QueueItem::byData([
    'type' => 'webform_submission',
    'id' => $submission->sid,
    'event' => $e,
  ])->save();
}

/**
 * Implements hook_webform_submission_update().
 */
function campaignion_logcrm_webform_submission_update($node, $submission) {
  campaignion_logcrm_webform_submission_insert($node, $submission);
}

/**
 * Implements hook_webform_confirm_email_email_confirmed().
 */
function campaignion_logcrm_webform_confirm_email_email_confirmed($node, $submission) {
  QueueItem::byData([
    'type' => 'webform_submission_confirmed',
    'id' => $submission->sid,
    'event' => Event::fromSubmissionConfirmation(new Submission($node, $submission)),
  ])->save();
}

/**
 * Implements hook_payment_status_change().
 */
function campaignion_logcrm_payment_status_change(Payment $payment, PaymentStatusItem $previous_status_item) {
  $statusChangedToSuccess = $payment->getStatus()->status == PAYMENT_STATUS_SUCCESS && $previous_status_item->status != PAYMENT_STATUS_SUCCESS;
  $hasContextObj = $payment->contextObj instanceof WebformPaymentContext;
  if (!$statusChangedToSuccess || !$hasContextObj)
    return;
  // Send payment event.
  $e = Event::fromPayment($payment);
  QueueItem::byData([
    'type' => 'payment',
    'id' => $payment->pid,
    'event' => $e,
  ])->save();
}

/**
 * Implements hook_campaignion_logcrm_webform_component_exporter_info().
 */
function campaignion_logcrm_campaignion_logcrm_webform_component_exporter_info() {
  $ns = '\\Drupal\\campaignion_logcrm\\WebformComponent\\';
  $info['select'] = $ns . 'Select';
  $info['verbatim'] = $ns . 'Verbatim';
  return $info;
}
