<?php

use \Drupal\little_helpers\Webform\Submission;
use \Drupal\webform_paymethod_select\WebformPaymentContext;

use \Drupal\campaignion_logcrm\Client;
use \Drupal\campaignion_logcrm\Event;

function campaignion_logcrm_libraries_info() {
  $libraries['dflydev-hawk'] = [
    'name' => 'Hawk â€” A PHP Implementation',
    'vendor url' => 'https://github.com/dflydev/dflydev-hawk',
    'download url' => 'https://github.com/dflydev/dflydev-hawk',
    'version' => '0.0.0',
    'xautoload' => function($adapter) {
       $adapter->composerJson('composer.json');
    },
    'dependencies' => ['RandomLib (>=1.0)'],
  ];
  $libraries['RandomLib'] = [
    'name' => 'RandomLib â€” A library for generating random numbers and strings of various strengths.',
    'vendor url' => 'https://github.com/ircmaxell/RandomLib',
    'download url' => 'https://github.com/ircmaxell/RandomLib',
    'version' => '1.1.0',
    'xautoload' => function($adapter) {
       $adapter->composerJson('composer.json');
    },
    'dependencies' => ['SecurityLib (>=1.1)'],
  ];
  $libraries['SecurityLib'] = [
    'name' => 'SecurityLib',
    'vendor url' => 'https://github.com/ircmaxell/SecurityLib',
    'download url' => 'https://github.com/ircmaxell/SecurityLib',
    'version' => '1.1.0',
    'xautoload' => function($adapter) {
       $adapter->composerJson('composer.json');
    },
  ];
  return $libraries;
}

function campaignion_logcrm_webform_submission_insert($node, $submission) {
  // Send submission event.
  $e = Event::fromSubmission(new Submission($node, $submission));
  Client::fromConfig()->sendEvent($e);
}

function campaignion_logcrm_webform_submission_update($node, $submission) {
  // Resend submission event.
  $e = Event::fromSubmission(new Submission($node, $submission));
  Client::fromConfig()->sendEvent($e);
}

/**
 * Implements hook_payment_status_change().
 */
function campaignion_logcrm_payment_status_change(Payment $payment, PaymentStatusItem $previous_status_item) {
  $statusChangedToSuccess = $payment->getStatus()->status == PAYMENT_STATUS_SUCCESS && $previous_status_item->status != PAYMENT_STATUS_SUCCESS;
  $hasContextObj = $payment->contextObj instanceof WebformPaymentContext;
  if (!$statusChangedToSuccess || !$hasContextObj)
    return;
  // Send payment event.
  $e = Event::fromPayment($payment);
  Client::fromConfig()->sendEvent($e);
}
